#!/bin/bash
# shellcheck disable=SC2034,SC2155

# Gabriel N Cloc Script [Technical Assessment #2]

# Version Information
readonly SCRIPT_AUTHOR="Gabriel Nieves"
readonly SCRIPT_CONTACT="taerkex@gmail.com"
readonly SCRIPT_VERSION="0.1"
readonly SCRIPT_UPDATED="May 14 2023"

# Global Variables
declare -ir UNIX_TIME=$(date +%s)
declare -r LOG_DIR="/tmp/gn-cloc"
declare -r LOG_PATH="${LOG_DIR}/gn-cloc-${UNIX_TIME}.log"
declare -r OUT_PATH="${LOG_DIR}/gn-cloc-${UNIX_TIME}.out"
declare -r ERR_PATH="${LOG_DIR}/gn-cloc-${UNIX_TIME}.err"
declare PKGMNGR=""

# Configurable Settings
[ -f ~/cloc_config ] && source ~/cloc_config
declare opt_scan_mode="git"
declare -i opt_loglevel=0
declare -i opt_batch=0
declare opt_clone_dir=""
declare opt_clocopts=""
declare -i opt_email_batch=0
declare opt_email_to="$CLOC_MAILX_TO"
declare opt_email_subject="${CLOC_MAILX_SUBJECT:=CLOC Analysis Report}"
declare opt_email_from="$CLOC_MAILX_FROM"
declare opt_email_cc="$CLOC_MAILX_CC"
declare opt_email_bcc="$CLOC_MAILX_BCC"
declare opt_sudo_interactive="-n"

#######################################
# Main run of the script. It completes the operatiosn in the following order:
#   1. Ensures arguments are present
#   2. Check if --debug is set
#   3. Process all options and adjust variables
#   4. Determines which package manager to use on the current system
#   5. Installs any missing packages required
#   6. Sets the "To" address if it hasn't already been set
#   7. Makes sure there are still arguments set to load in
#   8. Iterates through and parses all sources via cloc
#
# Globals:
#   None
# Arguments:
#   $1 - Accepts --debug as the FIRST argument to run in debug mode early
#   $@ - All arguments. These are parsed and used to adjust variables.
# Returns:
#   0 - On success
#   Non-zero - On failure (code varies by failure type)
#######################################
function main() {
  # Default output when no arguments are set
  if [ -z "$1" ]; then
    showSimpleHelp
    exit 1
  fi

  # Allow --debug early on for process argument testing
  [ "$1" = --debug -o "$1" = -vv ] && { opt_loglevel=2; shift; }

  # Create the log directory
  mkdir -p "$LOG_DIR"

  # Get provided options
  get_options=$(getopt -o h,v,D:,G,S,F -l help,verbose,debug,stdin,batch,clone-dir:,cloc-options:,sudo-interactive -- "$@") || exitWithError INVALID_ARGUMENTS "$get_options"

  # This converts options to a shell-readable format:
  #  - allows repeatable arguments (e.g. -vv)
  #  - puts non hyphed arguments at the end after "--"
  eval set -- "$get_options"

  echo_debug "Arguments: $get_options"

  # Do argument things
  while true; do
    echo_debug "Processing argument: $1 (\$2: $2)"
    case "$1" in
      -h|--help) showHelp; exit 1;;
      -v) [ $opt_loglevel -lt 2 ] && (( opt_loglevel++ ));;
      --verbose) opt_loglevel=1;;
      --debug) opt_loglevel=2;;
      -D|--clone-dir) opt_clone_dir="$2"; shift;;
      -G|--git|--repo) opt_scan_mode="git";;
      -S|--stdin) opt_scan_mode="stdin";;
      -F|--files) opt_scan_mode="files";;
      --cloc-options) opt_clocopts="$2"; shift;;
      --sudo-interactive) opt_sudo_interactive="";;

      # End loop
      --) shift; break;;
      *) exitWithError INVALID_ARGUMENT "$1";;
    esac
    shift
  done

  # Install necessary packages for the script to continue running 
  determinePackageManager || exitWithError NO_PACKAGE_MANAGER
  for dep in cloc mailx sendmail sed coreutils; do
    checkPackage "$dep" || installPackage "$dep" || {
      if [ "$dep" = cloc ]; then
        installClocPl || exitWithError INVALID_PACKAGE_MANAGER "$PKGMNGR"
      else
        exitWithError MISSING_DEP
      fi
    }
  done

  echo_debug "cloc Options: $opt_clocopts"

  # Take the first available argument as an email address if it hasn't
  # already been specified.
  if [[ -z "$opt_email_to" && "$1" =~ \@ && ! "$1" =~ \.git$ ]]; then
    opt_email_to="$1"
    echo_debug "Email address has been set to \"$opt_email_to\""
    shift
  fi

  # Check if there are still arguments. If there aren't, show the command usage
  if [ -z "$opt_email_to" ]; then
    showSimpleHelp "to-addr"
    return 1
  fi

  # Scan provided sources
  if parseSources "$@"; then
    echo "Successfully parsed sources!"
    sendEmail < "$OUT_PATH"
  fi
}

#######################################
# Output provided text when the verbose conditions are met.
#
# Globals:
#   opt_loglevel
# Arguments:
#   $1 - Text to output
# Returns:
#   None
#######################################
function echo_verbose() {
  [ $opt_loglevel -ge 1 ] && echo "$1"
}

#######################################
# Output provided text when the debug conditions are met.
#
# Globals:
#   opt_loglevel
# Arguments:
#   $1 - Text to output
# Returns:
#   None
#######################################
function echo_debug() {
  [ $opt_loglevel -ge 2 ] && echo "[DEBUG] $1"
}

#######################################
# Print a shorter help snippet on how to use this script. This should typically
# be followed by a non-zero exit code in order to avoid the command being
# treated as a successful run.
#
# Globals:
#   None
# Arguments:
#   $1 - Provide a missing arument to display instead of a generic failure message
# Returns:
#   None
#######################################
function showSimpleHelp() {
  if [ -n "$1" ]; then
    echo "gn-cloc-script: missing required argument \"$1\""
  else
    echo "gn-cloc-script: missing arguments"
  fi
  echo "Usage: gn-cloc-script [OPTIONS]... TO-ADDR REPOURL..."
  echo
  echo "Try \"gn-cloc-script --help\" for more options and information."
}

#######################################
# Print a longer help page regarding this script. This should typically be
# followed by a non-zero exit code in order to avoid the command being
# treated as a successful run.
#
# Globals:
#   SCRIPT_AUTHOR
#   SCRIPT_CONTACT
#   SCRIPT_VERSION
#   SCRIPT_UPDATED
# Arguments:
#   None
# Returns:
#   None
#######################################
function showHelp() {
  local -r R="\e[0m"  # Reset
  local -r G="\e[2m"  # Gray
  local -r I="\e[3m"  # Italics
  local -r U="\e[4m"  # Underline
  local -r B="\e[97m" # Bold

  echo -e "${B}GN CLOC Script${R}

${B}SYNOPSIS${R}
  ${B}gn-cloc-script${R} [${U}option${R}]... [-t ${U}to-addr${R}|${U}to-addr${R}] ${U}repourl${R}...
  ${B}gn-cloc-script${R} [${U}option${R}]... --files [-t ${U}to-addr${R}|${U}to-addr${R}] ${U}file${R}...
  ${B}gn-cloc-script${R} [${U}option${R}]... --stdin [-t ${U}to-addr${R}|${U}to-addr${R}]

${B}DESCRIPTION${R}
  $(blockPrint 2 "Runs cloc (https://cloc.sourceforge.net/) against a provided repo, file(s), or stdin and sends the result to a configured email address.")

${B}OPTIONS${R}
  ${B}-h${R}, ${B}--help${R}
    $(blockPrint 4 "Show this help page.")

  ${B}-v${R}, ${B}--verbose${R}
    $(blockPrint 4 "Run script with verbose output.")

  ${B}-vv${R}, ${B}--debug${R}
    $(blockPrint 4 "Run script with debug output.")

  ${B}-D${R}, ${B}--clone-dir${R} ${U}directory${R}
    $(blockPrint 4 "Directory to clone repositories to. If not set, it will clone the repositories to the current running directory.")

  ${B}--sudo-interactive${R}
    $(blockPrint 4 "Disables non-interactive mode of sudo when attempting to install packages.")

${B}PARSING OPTIONS${R}
  ${B}-G${R}, ${B}--git${R}, ${B}--repo${R}
    $(blockPrint 4 "Clone a provided git repo URL to be scanned. This is the default behavior.")

  ${B}-F${R}, ${B}--files${R}
    $(blockPrint 4 "Parse the provided file list to be scanned.")

  ${B}-S${R}, ${B}--stdin${R}
    $(blockPrint 4 "Parse the provided stdin to be scanned.")

  ${B}--cloc-options${R} ${U}options${R}...
    $(blockPrint 4 "Passes provided options to the ${B}cloc${R} command. Example: ${I}gn-cloc-script --cloc-options=\"--stdin --stat\"${R}")

${B}EMAIL OPTIONS${R}
  $(blockPrint 2 "The script provides various methods for adjusting the email settings. Options can be used or environment variables can be used. Refer to the arguments below for available environment variables for each setting.")

  $(blockPrint 2 "The environment variables can also be saved in ${B}~/cloc_config${R} and will be auto-loaded by the script.")

  ${B}-t${R}, ${B}--to${R} ${U}to-addr${R}
    $(blockPrint 4 "Set the destination address for the email. This is a required setting either through this argument or as an argument for the script.")

    $(blockPrint 4 "This can also be set with the ${B}CLOC_MAILX_TO${R} environment variable.")

  ${B}-s${R}, ${B}--subject${R} ${U}value${R}
    $(blockPrint 4 "Set the subject for the resulting email notification. If not set, it will default to \"CLOC Analysis Report\".")

    $(blockPrint 4 "This can also be set with the ${B}CLOC_MAILX_SUBJECT${R} environment variable.")

  ${B}-f${R}, ${B}--from${R} ${U}from-addr${R}
    $(blockPrint 4 "Set the ${B}from${R} address email notification. If not set, it will default the system's default address.")

    $(blockPrint 4 "This can also be set with the ${B}CLOC_MAILX_FROM${R} environment variable.")

  ${B}-c${R}, ${B}--cc${R} ${U}cc-addr${R}
    $(blockPrint 4 "Set the ${B}cc${R} for the notification email. Use commas to separate multiple emails.")

    $(blockPrint 4 "This can also be set with the ${B}CLOC_MAILX_CC${R} environment variable.")

  ${B}-b${R}, ${B}--bcc${R} ${U}bcc-addr${R}
    $(blockPrint 4 "Set the ${B}bcc${R} for the notification email. Use commas to separate multiple emails.")
    
    $(blockPrint 4 "This can also be set with the ${B}CLOC_MAILX_BCC${R} environment variable.")

${B}AUTHOR${R}
  $(blockPrint 2 "Written by $SCRIPT_AUTHOR <$SCRIPT_CONTACT> for Checkmarx technical assessment #2.")

${B}VERSION${R}
  $(blockPrint 2 "Version $SCRIPT_VERSION. Last updated $SCRIPT_UPDATED.")
";
}

#######################################
# Print a text in an indented block based on input indentation
#
# In particular, it changes the style of the wrapping from the first paragraph
# below to the second with the spaces prior to each line being dependent on the
# first argument:
# 
#     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod te
# mpor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, qui
# s nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
#
#     Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod
#     tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
#     veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
#     commodo consequat.
#
# Globals:
#   None
# Arguments:
#   $1 - Number of spaces to prefix each line
#   $2 - Message to be wrapped
# Returns:
#   None
#######################################
function blockPrint() {
  tabs "$1"
  fold -s -w $(( $(tput cols) - $1 )) <<< "$2"  | sed -r "s/^/\t/g"
}

#######################################
# Outputs a fatal error message and exits the application. The output message
# is dependent on the provided arguments.
#
# Globals:
#   None
# Arguments:
#   $1 - Error ID of the message
#   $2 - Additional information used by a message. Varies between messages.
# Returns:
#   Non-zero exit code, typically 1. May change depending on error type.
#######################################
function exitWithError() {
  local ERROR_ID="$1"
  local ERROR_CODE=1
  local ERROR_MSG=""

  case "$ERROR_ID" in
    INVALID_ARGUMENT) shift; ERROR_MSG="Invalid argument received \"$*\"";;
    INVALID_ARGUMENTS) shift; ERROR_MSG="Invalid arguments received: $*\nUse -h to view help for valid arguments.";;
    FILES_AND_STDIN) shift; ERROR_MSG="Files were provided while stdin is enabled. Please specify only file arguments OR --stdin";;
    NO_PACKAGE_MANAGER) shift; ERROR_MSG="No valid package manager was found";;
    INVALID_PACKAGE_MANAGER) shift; ERROR_MSG="An invalid package manager was provided: $*";;
    MISSING_DEP) shift; ERROR_MSG="Failed to install missing dependency: $*";;
    REPO_DIR_MISMATCH) shift; ERROR_MSG="The directory \"$1\" contains a directory that does not match the provided repo URL \"$2\"";;
  esac

  [ -n "$ERROR_MSG" ] \
    && echo -e "Fatal Error: $ERROR_MSG" >&2 \
    || echo -e "Fatal Error: $ERROR_ID" >&2

  exit $ERROR_CODE
}

#######################################
# Determines which package manager to use for checking and installing 
#
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   0 - Function successfully found a compatible package manager
#   1 - Function failed to find a compatible package manager
#######################################
function determinePackageManager() {
  for PKGMNGR_SEARCH in dnf yum apt pkg pacman; do
    if [ -x "$(which "$PKGMNGR_SEARCH")" ]
    then
      PKGMNGR="$PKGMNGR_SEARCH"
      break
    fi
  done

  [ -n "$PKGMNGR" ] && return 0
  
  return 1
}

#######################################
# Check if a package is installed depending on the OS' package manager.
# Function will output a fatal error and exit the application upon a failure.
#
# Globals:
#   PKGMNGR
# Arguments:
#   $1 - Name of the package to check
# Returns:
#   None
#######################################
function checkPackage() {
  case "$PKGMNGR" in
    dnf|yum) rpm -q "$1" >/dev/null;;
    apt) apt -y -q install "$1";;
    # pkg) pkg -y -q install "$1";;
    # pacman) pacman -y -q install "$1";;
    *) exitWithError INVALID_PACKAGE_MANAGER "$PKGMNGR";;
  esac
}

#######################################
# Install the perl version of cloc as it's sometimes not available in the OS' repo
#
# Globals:
#   None
# Arguments:
#   None
# Returns:
#   None
#######################################
function installClocPl() {
  echo "Installing cloc to ~/bin"
  mkdir -p ~/bin
  wget 'https://raw.githubusercontent.com/AlDanial/cloc/master/cloc' -O ~/bin/cloc && chmod u+x ~/bin/cloc || return 1
}

#######################################
# Install a package using the OS' package manager
# Function will output a fatal error and exit the application upon a failure.
#
# Globals:
#   PKGMNGR
# Arguments:
#   $1 - Name of the package to install
# Returns:
#   None
#######################################
function installPackage() {
  echo "Script is installing missing dependencies: $1"
  case "$PKGMNGR" in
    dnf|yum) sudo ${opt_sudo_interactive} "$PKGMNGR" -y -q install "$1";;
    apt) sudo ${opt_sudo_interactive} apt -y -q install "$1";;
    # pkg) sudo ${opt_sudo_interactive} pkg -y -q install "$1";;
    # pacman) sudo ${opt_sudo_interactive} pacman -y -q -S install "$1";;
    *) exitWithError INVALID_PACKAGE_MANAGER "$PKGMNGR";;
  esac
}

#######################################
# Clones repository into a directory determined by the application
#
# Globals:
#   None
# Arguments:
#   $1 - Git repository URL
#   $2 - (Optional) Directory to clone repository to.
#         If it is not set it will determined automatically.
# Returns:
#   0 - Successful clone
#   Non-Zero - Failure. May depend on git return code
#######################################
function cloneRepo() {
  local repo_url="$1"
  local repo_dir="$2"

  [ -z "$repo_dir" ] && repo_dir="$(getRepoDirectory "$1")"
  echo_debug "Cloning \"$repo_url\" to \"$repo_dir\""

  if [ -d "$repo_dir" ]; then
    if grep -q "url = ${repo_url}" "$repo_dir/.git/config"; then
      echo_verbose "Provided repository already exists at \"$repo_dir\". Proceeding."
      return 0
    else
      exitWithError REPO_DIR_MISMATCH "$repo_dir" "$repo_url"
    fi
  else
    git clone "$repo_url" "$repo_dir"
  fi
}

#######################################
# Outputs a converted repository URL into the expected resulting directory name
#   Example #1: https://git.xtnet.link/Taerk/cloc-script.git -> cloc-script
#   Example #2: git@git.xtnet.link:Taerk/cloc-script.git -> cloc-script
#
# Globals:
#   opt_clone_dir
# Arguments:
#   $1 - Git repository URL
# Returns:
#   None
#######################################
function getRepoDirectory() {
  if [ -n "$opt_clone_dir" ]; then
    realpath "${opt_clone_dir}/$(basename "$1" | sed -r 's/\.git$//')"
  else
    basename "$1" | sed -r 's/\.git$//'
  fi
}

#######################################
# Sends an email using settings and content set by the application
#
# Globals:
#   opt_email_from
#   opt_email_subject
#   opt_email_cc
#   opt_email_bcc
#   opt_email_to
# Arguments:
#   stdin - Loads in stdin as the contents for the email
# Returns:
#   None
#######################################
function sendEmail() {
  local fflag="" fval=""
  local sflag="" sval=""
  local cflag="" cval=""
  local bflag="" bval=""
  local tval="" # "To" does not use an option flag in mailx

  [ -n "$opt_email_from" ] && { fflag="-r"; fval="$opt_email_from"; }
  [ -n "$opt_email_subject" ] && { sflag="-s"; sval="$opt_email_subject"; }
  [ -n "$opt_email_cc" ] && { cflag="-c"; cval="$opt_email_cc"; }
  [ -n "$opt_email_bcc" ] && { bflag="-b"; bval="$opt_email_bcc"; }
  [ -n "$opt_email_to" ] && { tval="$opt_email_to"; }

  echo
  echo "Now sending results"
  echo "  Subject: ${sval}"
  echo "  To: ${tval}"
  [ -n "$fval" ] && echo "  From: ${fval}"
  [ -n "$cval" ] && echo "  CC: ${cval}"
  [ -n "$bval" ] && echo "  BCC: ${bval}"

  # Variables below should remain unquoted in order to be expanded as valid arguments
  if mail $fflag $fval $sflag "$sval" $cflag $cval $bflag $bval "$tval" < /dev/stdin; then
    printf "\nSuccessfully sent email!\n"
    return 0
  else
    printf "\nFailed to send email!\n"
    return 1
  fi
}

function parseSources() {
  echo_debug "Now attempting to parse all sources. Scan mode is: $opt_scan_mode"

  # Scan provided files
  case "$opt_scan_mode" in
    git)
      for INPUT_REPO in "$@"; do
        parseRepo "$INPUT_REPO"
      done
      ;;
    
    files)
      for INPUT_FILE in "$@"; do
        parseFile "$INPUT_FILE"
      done
      ;;

    stdin)
      parseStdin
      ;;
  esac 2>&1 | tee "$OUT_PATH"
}

function parseRepo() {
  local source_repo="$1"
  local repo_destination=""

  echo_verbose "Checking repository: $source_repo"

  repo_destination="$(getRepoDirectory "$source_repo")"
  echo_debug "Expected clone path: $repo_destination"

  echo "---"
  echo "Type: git"
  echo "Src:  $source_repo"
  echo "Dir:  $repo_destination"
  echo "---"

  # Clone the repo. Stop the function if it fails. This will allow the loop to continue.
  cloneRepo "$source_repo" "$repo_destination" || return 1
  
  # $opt_clocopts needs to remain unquoted in order to expand properly
  cloc $opt_clocopts "$repo_destination"
}

function parseFile() {
  local source_file="$1"

  echo "Checking file: $source_file"

  echo "---"
  echo "Type: file"
  echo "Src:  $(realpath "$source_file")"
  echo "---"

  # Make sure the file exists, otherwise return a non-zero exit code. This will allow
  # the loop to continue.
  if [ ! -f "$source_file" ]; then
    echo "Error: File not found: $source_file" >&2
    return 1
  fi

  # $opt_clocopts needs to remain unquoted in order to expand properly
  cloc $opt_clocopts "$source_file"
}

function parseStdin() {
  echo "---"
  echo "Type: stdin"
  echo "---"

  echo "Checking code via stdin"
  cloc $opt_clocopts - < /dev/stdin
}

main "$@"